{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nconst useCountdown = targetDate => {\n  _s();\n\n  const countDownDate = new Date(targetDate).getTime();\n  const [countDown, setCountDown] = useState(countDownDate - new Date().getTime());\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCountDown(countDownDate - new Date().getTime());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [countDownDate]);\n  return getReturnValues(countDown);\n};\n\n_s(useCountdown, \"+9zWhIOWADc8hK60aUgFV91+m8I=\");\n\nconst getReturnValues = countDown => {\n  // calculate time left\n  const days = Math.floor(countDown / (1000 * 60 * 60 * 24));\n  const hours = Math.floor(countDown % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n  const minutes = Math.floor(countDown % (1000 * 60 * 60) / (1000 * 60));\n  const seconds = Math.floor(countDown % (1000 * 60) / 1000);\n  return [days, hours, minutes, seconds];\n};\n\nexport { useCountdown };","map":{"version":3,"sources":["D:/React-Learning/React-Learning/src/Components/useCountdown.js"],"names":["useEffect","useState","useCountdown","targetDate","countDownDate","Date","getTime","countDown","setCountDown","interval","setInterval","clearInterval","getReturnValues","days","Math","floor","hours","minutes","seconds"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AAAA;;AACjC,QAAMC,aAAa,GAAG,IAAIC,IAAJ,CAASF,UAAT,EAAqBG,OAArB,EAAtB;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CACtCG,aAAa,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EADsB,CAA1C;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BF,MAAAA,YAAY,CAACJ,aAAa,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAjB,CAAZ;AACH,KAF2B,EAEzB,IAFyB,CAA5B;AAIA,WAAO,MAAMK,aAAa,CAACF,QAAD,CAA1B;AACH,GANQ,EAMN,CAACL,aAAD,CANM,CAAT;AAQA,SAAOQ,eAAe,CAACL,SAAD,CAAtB;AACH,CAhBD;;GAAML,Y;;AAkBN,MAAMU,eAAe,GAAIL,SAAD,IAAe;AACnC;AACA,QAAMM,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWR,SAAS,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAApB,CAAb;AACA,QAAMS,KAAK,GAAGF,IAAI,CAACC,KAAL,CACTR,SAAS,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAV,IAAuC,OAAO,EAAP,GAAY,EAAnD,CADU,CAAd;AAGA,QAAMU,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAYR,SAAS,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAV,IAAkC,OAAO,EAAzC,CAAX,CAAhB;AACA,QAAMW,OAAO,GAAGJ,IAAI,CAACC,KAAL,CAAYR,SAAS,IAAI,OAAO,EAAX,CAAV,GAA4B,IAAvC,CAAhB;AAEA,SAAO,CAACM,IAAD,EAAOG,KAAP,EAAcC,OAAd,EAAuBC,OAAvB,CAAP;AACH,CAVD;;AAYA,SAAShB,YAAT","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst useCountdown = (targetDate) => {\r\n    const countDownDate = new Date(targetDate).getTime();\r\n\r\n    const [countDown, setCountDown] = useState(\r\n        countDownDate - new Date().getTime()\r\n    );\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setCountDown(countDownDate - new Date().getTime());\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [countDownDate]);\r\n\r\n    return getReturnValues(countDown);\r\n};\r\n\r\nconst getReturnValues = (countDown) => {\r\n    // calculate time left\r\n    const days = Math.floor(countDown / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor(\r\n        (countDown % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n    );\r\n    const minutes = Math.floor((countDown % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((countDown % (1000 * 60)) / 1000);\r\n\r\n    return [days, hours, minutes, seconds];\r\n};\r\n\r\nexport { useCountdown };"]},"metadata":{},"sourceType":"module"}