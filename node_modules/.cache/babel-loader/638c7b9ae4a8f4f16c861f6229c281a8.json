{"ast":null,"code":"var _jsxFileName = \"D:\\\\React-Learning\\\\React-Learning\\\\src\\\\Components\\\\useCountdown.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst useCountdown = targetDate => {\n  _s();\n\n  const countDownDate = new Date(targetDate).getTime();\n  const [countDown, setCountDown] = useState(countDownDate - new Date().getTime());\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCountDown(countDownDate - new Date().getTime());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [countDownDate]); // calculate time left\n\n  const days = Math.floor(countDown / (1000 * 60 * 60 * 24));\n  const hours = Math.floor(countDown % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n  const minutes = Math.floor(countDown % (1000 * 60 * 60) / (1000 * 60));\n  const seconds = Math.floor(countDown % (1000 * 60) / 1000);\n\n  if (days + hours + minutes + seconds <= 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expired-notice\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Expired!!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"show-counter\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [days, \" : \", hours, \" : \", minutes, \" : \", seconds]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n};\n\n_s(useCountdown, \"+9zWhIOWADc8hK60aUgFV91+m8I=\");\n\nexport { useCountdown };","map":{"version":3,"sources":["D:/React-Learning/React-Learning/src/Components/useCountdown.js"],"names":["useEffect","useState","useCountdown","targetDate","countDownDate","Date","getTime","countDown","setCountDown","interval","setInterval","clearInterval","days","Math","floor","hours","minutes","seconds"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;AAEA,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AAAA;;AACjC,QAAMC,aAAa,GAAG,IAAIC,IAAJ,CAASF,UAAT,EAAqBG,OAArB,EAAtB;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAACG,aAAa,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAjB,CAA1C;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BF,MAAAA,YAAY,CAACJ,aAAa,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAjB,CAAZ;AACH,KAF2B,EAEzB,IAFyB,CAA5B;AAIA,WAAO,MAAMK,aAAa,CAACF,QAAD,CAA1B;AACH,GANQ,EAMN,CAACL,aAAD,CANM,CAAT,CALiC,CAajC;;AACA,QAAMQ,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWP,SAAS,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAApB,CAAb;AACA,QAAMQ,KAAK,GAAGF,IAAI,CAACC,KAAL,CACTP,SAAS,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAV,IAAuC,OAAO,EAAP,GAAY,EAAnD,CADU,CAAd;AAGA,QAAMS,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAYP,SAAS,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAV,IAAkC,OAAO,EAAzC,CAAX,CAAhB;AACA,QAAMU,OAAO,GAAGJ,IAAI,CAACC,KAAL,CAAYP,SAAS,IAAI,OAAO,EAAX,CAAV,GAA4B,IAAvC,CAAhB;;AAEA,MAAIK,IAAI,GAAGG,KAAP,GAAeC,OAAf,GAAyBC,OAAzB,IAAoC,CAAxC,EAA2C;AACvC,wBAAO;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAAP;AAKH,GAND,MAMO;AACH,wBAAO;AAAA,6BACH;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACI;AAAA,qBAAOL,IAAP,SAAgBG,KAAhB,SAA0BC,OAA1B,SAAsCC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADG,qBAAP;AAKH;AACJ,CAlCD;;GAAMf,Y;;AAoCN,SAASA,YAAT","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst useCountdown = (targetDate) => {\r\n    const countDownDate = new Date(targetDate).getTime();\r\n\r\n    const [countDown, setCountDown] = useState(countDownDate - new Date().getTime());\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setCountDown(countDownDate - new Date().getTime());\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [countDownDate]);\r\n\r\n    // calculate time left\r\n    const days = Math.floor(countDown / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor(\r\n        (countDown % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n    );\r\n    const minutes = Math.floor((countDown % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((countDown % (1000 * 60)) / 1000);\r\n\r\n    if (days + hours + minutes + seconds <= 0) {\r\n        return <div className=\"expired-notice\">\r\n                <span>Expired!!!</span>\r\n                {/* <p>Please select a future date and time.</p> */}\r\n            </div>\r\n        \r\n    } else {\r\n        return <>\r\n            <div className=\"show-counter\">\r\n                <span>{days} : {hours} : {minutes} : {seconds}</span>\r\n            </div>\r\n        </>\r\n    }\r\n};\r\n\r\nexport { useCountdown };"]},"metadata":{},"sourceType":"module"}